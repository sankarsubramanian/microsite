{
    "steps": [
       {    
            "title":"Create Phone Object & Access Token",
            "content": "1. Every action for call & conference management is done via the Phoneâ€™s interface.<br> 2. Phone object is the main interface for login & making a call.<br> 3. Register the events call:incoming, call:connected, call:disconnected with the Phone object to handle the appropriate actions.",
            "htmlcode": "<html>&#013;&lt;p&gt;&#013;&lt;button id=&quot;createPhoneObjectButton&quot; onclick=&quot;createPhoneObject()&quot;&gt;Create Phone Object&lt;/button&gt;&#013;&lt;button id=&quot;createPhoneSuccessButton&quot; hidden disabled&gt;Phone Object Created Successfully&lt;/button&gt;&#013;&lt;/p&gt;&#013;</html>",
            "javascriptcode": "//Step 1.Get DHS Configuration and Create Phone Object  \n var phone, accessToken, myDHS, myDHSURL = 'your_dhs_url';\n var xhrConfig = new XMLHttpRequest();\n xhrConfig.open('GET', myDHSURL + \"/config/\");\n xhrConfig.onreadystatechange = function() { \n if (xhrConfig.readyState == 4) { \n if(xhrConfig.status == 200) { \n myDHS = JSON.parse(xhrConfig.responseText);} \n else { \n console.log(xhrConfig.responseText);}}} \n xhrConfig.send();\n function createPhoneObject() { \n phone = ATT.rtc.Phone.getPhone();registerEvents();\n createPhoneObjectButton.hidden = true;\n createPhoneSuccessButton.hidden = false;} \n function registerEvents() { \n phone.on('error', onError);} \n function onError(data) {\nconsole.log(data.error);\n}<br>4. Before create the access token, refer the Sample App Deployment from JSDocumentation & create Developer Hosted server (DHS).<br> 5. Get the app token url from DHS & request the access token.<br> 6. Once token received associate the token with the user-id."
       },
      
        {
        	"title":"Create & Clear Enhanced WebRTC session",
            "content": "1. phone.login establishes Enhanced webRTC session so that the user can start making Enhanced webRTC calls.<br> 2. Session ready event will be published after successfully logged into the the Enhanced webRTC. This event indicates that the SDK is ready to make or receive calls.<br>3. phone.logout logs out the user from Enhanced webRTC session.<br> 4. Session disconnected event will be published after logging out from Enhanced webRTC session. This event is published to indicate that the session was successfully deleted."
        },
        {
        	"title":"Make & Answer Call",
            "content": "1. Once you have registered handlers for all appropriate events you can use the phone.dial method with Account ID, call type ( video for video calls) & video elements for local & remote media stream to start a call.<br> 2. Call connected event will be published when a connection is established between two parties.<br> 3. Once call connected local & remote video will be displayed in video elements"
        },
        {
        	"title":"Hold & Resume Call",
            "content": "1. Use the phone.hold method to put the current call or conference on hold.<br> 2. call:held event will be published when the call is on hold.<br>3. Use the phone.resume method to resume the current call or conference.<br> 4. call:resumed event will be published when phone.resume is invoked."
        },
        {
        	"title":"Mute & Unmute Call",
            "content": "1. Use the phone.mute method to mute the current call.<br> 2. call:muted event will be published when phone.mute is invoked.<br>3.Unmute a Call by using the phone object API as <br>Ex : phone.unmute();<br>4. Listening event as below.<br>phone.on('call:unmuted', onUnmutedCall);"
        },
        {
        	"title":"Add & Switch Call",
            "content": "1. Use the phone.addCall method with Account ID, call type (audio for audio only calls & video for video calls) & video elements for local & Remote media stream to make a second call when there is a first call in progress.<br>2. Use the phone.switchCall method to switch between two ongoing calls.<br> 3. The foreground call will be put on hold and moved to background then the background call will be brought to foreground.<br> 4. session:call-switched event will be published when the current active call is switched."
        }
      
    ]
}
